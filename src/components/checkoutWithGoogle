import React, { useState, useEffect, useRef } from "react";
import { Link, useNavigate } from "react-router-dom";
import { LoadScript, Autocomplete } from "@react-google-maps/api";

const GOOGLE_MAPS_API_KEY = "YOUR_GOOGLE_MAPS_API_KEY"; // Replace with your API Key

const CheckoutPage = () => {
  const [cartItems, setCartItems] = useState([]);
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    email: "",
    firstName: "",
    lastName: "",
    address: "",
    suburb: "",
    city: "",
    province: "",
    postalCode: "",
    phone: "",
    billingAddressSame: true,
    billingAddress: {
      firstName: "",
      lastName: "",
      address: "",
      suburb: "",
      city: "",
      province: "",
      postalCode: "",
      phone: "",
    },
  });

  const autocompleteRef = useRef(null);

  useEffect(() => {
    const savedCart = JSON.parse(localStorage.getItem("cart")) || [];
    setCartItems(savedCart);
  }, []);

  const handlePlaceSelect = () => {
    const place = autocompleteRef.current.getPlace();

    const addressComponents = place.address_components;
    const formattedAddress = place.formatted_address;

    const updatedFormData = {
      ...formData,
      address: formattedAddress,
    };

    addressComponents.forEach((component) => {
      if (component.types.includes("locality")) {
        updatedFormData.city = component.long_name;
      }
      if (component.types.includes("administrative_area_level_1")) {
        updatedFormData.province = component.long_name;
      }
      if (component.types.includes("postal_code")) {
        updatedFormData.postalCode = component.long_name;
      }
    });

    setFormData(updatedFormData);
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const subtotal = cartItems.reduce(
    (total, item) => total + item.price * item.quantity,
    0
  );

  return (
    <LoadScript googleMapsApiKey={GOOGLE_MAPS_API_KEY} libraries={["places"]}>
      <div style={{ display: "flex", justifyContent: "center", gap: "50px", padding: "20px" }}>
        {/* Left Section */}
        <div style={{ flex: "1", maxWidth: "600px" }}>
          <form>
            <h2>Contact</h2>
            <input
              type="email"
              name="email"
              placeholder="Email"
              value={formData.email}
              onChange={handleChange}
              style={{ width: "100%", padding: "10px", marginBottom: "10px" }}
              required
            />

            <h2>Delivery</h2>
            <label>Address</label>
            <Autocomplete
              onLoad={(autocomplete) => (autocompleteRef.current = autocomplete)}
              onPlaceChanged={handlePlaceSelect}
            >
              <input
                type="text"
                name="address"
                placeholder="Start typing your address..."
                value={formData.address}
                onChange={handleChange}
                style={{
                  width: "100%",
                  padding: "10px",
                  marginBottom: "10px",
                }}
              />
            </Autocomplete>

            <div style={{ display: "flex", gap: "10px" }}>
              <input
                type="text"
                name="city"
                placeholder="City"
                value={formData.city}
                onChange={handleChange}
                style={{ flex: 1, padding: "10px" }}
              />
              <input
                type="text"
                name="province"
                placeholder="Province"
                value={formData.province}
                onChange={handleChange}
                style={{ flex: 1, padding: "10px" }}
              />
              <input
                type="text"
                name="postalCode"
                placeholder="Postal Code"
                value={formData.postalCode}
                onChange={handleChange}
                style={{ flex: 1, padding: "10px" }}
              />
            </div>

            <button
              type="submit"
              style={{
                width: "100%",
                padding: "15px",
                marginTop: "20px",
                backgroundColor: "black",
                color: "white",
                border: "none",
                fontSize: "16px",
                cursor: "pointer",
              }}
            >
              Submit
            </button>
          </form>
        </div>

        {/* Right Section: Order Summary */}
        <div style={{ flex: "0.5", maxWidth: "300px" }}>
          <h2>Order Summary</h2>
          {cartItems.map((item) => (
            <div key={item.id} style={{ display: "flex", marginBottom: "15px" }}>
              <img
                src={item.image}
                alt={item.name}
                style={{ width: "80px", height: "80px", marginRight: "10px" }}
              />
              <div>
                <Link to={`/product/${encodeURIComponent(item.name)}`} style={{ color: "black" }}>
                  {item.name}
                </Link>
                <p>R {item.price.toFixed(2)}</p>
                <p>Qty: {item.quantity}</p>
              </div>
            </div>
          ))}
          <hr />
          <p>Subtotal: R {subtotal.toFixed(2)}</p>
          <p>Shipping: Enter shipping address</p>
          <h3>Total: R {subtotal.toFixed(2)}</h3>
        </div>
      </div>
    </LoadScript>
  );
};

export default CheckoutPage;

/* 
1. Go to Google Cloud Console
2. Create a New Project (Optional)
3. Enable the Google Maps API
4. Generate Your API Key
5. Use the API Key in Your Code
6. Add Billing to Your Google Cloud Project
Google Maps APIs require billing to be enabled. Google offers:

$200 free credit per month.
More than enough for basic usage.
Set up billing in the Billing section of the Google Cloud Console.
*/